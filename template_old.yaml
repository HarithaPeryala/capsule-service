AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Capsule-Service-Deployment-Descriptor

Parameters:
  Stage:
    Type: String
    Description: Stage name to deploy resources to
    AllowedValues:
      - dev
      - prod
  UserPoolName:
    Type: String
    Default: CapsuleUserPool
    Description: Name of the Amazon Cognito User Pool
  UserPoolClientName:
    Type: String
    Default: CapsuleUserPoolClient
    Description: Name of the Amazon Cognito User Pool Client
  IdentityPoolName:
    Type: String
    Default: CapsuleIdentityPool
    Description: Name of the Amazon Cognito Identity Pool
  IdentityPoolRoleName:
    Type: String
    Default: CapsuleIdentityPoolRole
    Description: Name of the AWS Identity and Access Management IAM role for the identity pool

Globals:
  Function:
    Runtime: java11
    MemorySize: 1024
    Timeout: 20
    AutoPublishAlias: dev
    Handler: org.springframework.cloud.function.adapter.aws.FunctionInvoker
    CodeUri: ./application
    Tags:
      Stage: !Ref Stage
      Service: Capsule
      Resource: Lambda
    Environment:
      Variables:
        TABLE: !Ref CapsuleTable
        APPLICATION_ENVIRONMENT: !Ref Stage
        CLOUD_REGION: US_West_2
        MAIN_CLASS: com.tekcapsule.capsule.application.CapsuleApplication
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Ref UserPoolClientName
      GenerateSecret: false

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Ref IdentityPoolName
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  IdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref IdentityPoolRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref IdentityPool
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: AllowAccessToAPIGateway
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:*:*:*/*/*


  # Setup API Gateway

  CapsuleApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "capsule-${Stage}"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For, Content-Type, Authorization, X-User-Login, X-Channel-Code'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt MyCognitoUserPool.Arn
      Variables:
        LAMBDA_ALIAS: !Ref Stage
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: !Ref UserPoolClientName
      GenerateSecret: false


  # Setup DynamoDB Table

  CapsuleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Stage}Capsule"
      AttributeDefinitions:
        - AttributeName: capsuleId
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: topicCode
          AttributeType: S
        - AttributeName: editorsPick
          AttributeType: N
        - AttributeName: recommendations
          AttributeType: N
      KeySchema:
        - AttributeName: capsuleId
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: topicGSI
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: topicCode
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: editorsPickGSI
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: editorsPick
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
        - IndexName: trendingGSI
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: recommendations
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  # Setup Lambda Functions

  CreateCapsuleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Capsule-CreateCapsule"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapsuleTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: createFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: capsule/create
            Method: post
            RestApiId:
              Ref: CapsuleApi

  UpdateCapsuleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Capsule-UpdateCapsule"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapsuleTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: updateFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: capsule/update
            Method: post
            RestApiId:
              Ref: CapsuleApi

  GetCapsuleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Capsule-GetCapsule"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapsuleTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: getFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: capsule/get
            Method: post
            RestApiId:
              Ref: CapsuleApi

  SearchCapsuleByTopicFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Stage}-Capsule-SearchCapsuleByTopic"
      SnapStart:
        ApplyOn: PublishedVersions
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CapsuleTable
      Environment:
        Variables:
          SPRING_CLOUD_FUNCTION_DEFINITION: searchByTopicFunction
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: capsule/searchByTopic
            Method: post
            RestApiId:
              Ref: CapsuleApi

  # Set Output Variable

Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
  IdentityPoolId:
    Value: !Ref IdentityPool
  IdentityPoolRoleId:
    Value: !Ref IdentityPoolRole
  ApiEndpoint:
    Description: "Capsule API endpoint."
    Value: !Sub "https://${CapsuleApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/capsule"